#!/bin/bash

# Script de setup pour le syst√®me de v√©rification de permis ZK
# Ce script compile le circuit, effectue le trusted setup et g√©n√®re les cl√©s

echo "üöÄ Initialisation du syst√®me de v√©rification de permis ZK"
echo "=================================================="

# V√©rifier que les outils n√©cessaires sont install√©s
check_dependencies() {
    echo "üîç V√©rification des d√©pendances..."
    
    if ! command -v circom &> /dev/null; then
        echo "‚ùå circom n'est pas install√©"
        echo "Installez-le avec: npm install -g circom"
        exit 1
    fi
    
    if ! command -v node &> /dev/null; then
        echo "‚ùå Node.js n'est pas install√©"
        exit 1
    fi
    
    echo "‚úÖ Toutes les d√©pendances sont pr√©sentes"
}

# Installer les packages npm n√©cessaires
install_packages() {
    echo "üì¶ Installation des packages npm..."
    
    if [ ! -f "package.json" ]; then
        npm init -y
    fi
    
    npm install snarkjs circomlib ffjavascript
    
    echo "‚úÖ Packages install√©s"
}

# Compiler le circuit
compile_circuit() {
    echo "üî® Compilation du circuit..."
    
    # Cr√©er le r√©pertoire de sortie
    mkdir -p build
    
    # Compiler le circuit
    circom -l ./node_modules/ ./data/proof_license/licenseA.circom --r1cs --wasm --sym -o build/ 
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Circuit compil√© avec succ√®s"
    else
        echo "‚ùå Erreur lors de la compilation du circuit"
        exit 1
    fi

    circom -l ./node_modules/ ./data/Is18/Is18.circom --r1cs --wasm --sym -o build/ 
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Circuit compil√© avec succ√®s"
    else
        echo "‚ùå Erreur lors de la compilation du circuit"
        exit 1
    fi
}

# Effectuer le trusted setup
trusted_setup() {
    echo "üîê Trusted setup en cours..."
    
    cd build
    
    # Phase 1: Powers of Tau ceremony
    echo "Phase 1: Powers of Tau ceremony..."
    if [ ! -d "ptau" ]; then
        mkdir -p ptau
    fi
    if [ ! -f "ptau/pot18_0000.ptau" ]; then
        touch ptau/pot18_0000.ptau
    fi
    if [ ! -f "ptau/pot18_beacon.ptau" ]; then
        touch ptau/pot18_beacon.ptau
    fi
    if [ ! -f "ptau/pot18_final.ptau" ]; then

        cd ptau
        beacon_entropy="$(head -c 32 /dev/urandom | xxd -p -c 32)"
        echo "Cr√©ation de la ceremony Powers of Tau..."
        snarkjs powersoftau new bn128 18 pot18_0000.ptau -v
        echo "Contribution 1..."
        snarkjs powersoftau contribute pot18_0000.ptau pot18_0001.ptau --name="Contrib 1" --entropy="$(head -c 64 /dev/urandom | base64)" -v
        echo "Contribution 2..."
        snarkjs powersoftau contribute pot18_0001.ptau pot18_0002.ptau --name="Contrib 2" --entropy="$(head -c 64 /dev/urandom | base64)" -v
        echo "Finalisation de la phase 1 avec le beacon..."
        snarkjs powersoftau beacon pot18_0002.ptau pot18_beacon.ptau  "$beacon_entropy" 10 -v
        echo "Pr√©paration de la phase 2..."
        snarkjs powersoftau prepare phase2 pot18_beacon.ptau pot18_final.ptau -v
        echo "‚úÖ Phase 1 termin√©e"
        # wget https://storage.googleapis.com/zkevm/ptau/powersOfTau28_hez_final_18.ptau -O pot18_final.ptau

        cd ..
    else
        echo "La ceremony Powers of Tau est d√©j√† termin√©e."
    fi
    
    # Phase 2: Circuit-specific setup
    set -e  # Stop on error

    echo "üîß Phase 2 : Circuit-specific setup..."
    
    # D√©finir les chemins
    R1CS="licenseA.r1cs"
    PTAU="ptau/pot18_final.ptau"
    ZKEY0="key_0000.zkey"
    ZKEY1="key_0001.zkey"
    ZKEY_FINAL="key_final.zkey"
    VKEY_JSON="verification_key.json"

    if [ ! -f "$ZKEY_FINAL" ] || [ ! -f "$VKEY_JSON" ]; then
        
        # √âtape 1 : G√©n√©ration initiale du zkey
        echo "üì¶ Setup initial du circuit..."
        snarkjs zkey new $R1CS $PTAU $ZKEY0

        # √âtape 2 : Contribution au zkey
        echo "üßë‚Äçüíª Contribution au zkey..."
        snarkjs zkey contribute $ZKEY0 $ZKEY1 --name="Contribution circuit" --entropy="$(head -c 64 /dev/urandom | base64)"

        # √âtape 3 : Beacon pour s√©curiser le zkey final
        echo "‚ö° Beacon pour finaliser le zkey..."
        snarkjs zkey beacon $ZKEY1 $ZKEY_FINAL \
        "$(head -c 32 /dev/urandom | xxd -p -c 32)" \
        10 -v

        # √âtape 4 : Export de la cl√© de v√©rification
        echo "üîê Export de la cl√© de v√©rification..."
        snarkjs zkey export verificationkey $ZKEY_FINAL $VKEY_JSON
        echo "‚úÖ Phase 2 termin√©e avec succ√®s"
        cd ..
    
        # Copier les fichiers n√©cessaires dans le r√©pertoire principal
        cp build/licenseA_js/licenseA.wasm data/proof_license/circuit.wasm
        cp build/key_final.zkey data/proof_license/circuit.zkey
        cp build/verification_key.json data/proof_license/verification_key.json
        cp build/licenseA_js/generate_witness.js data/proof_license/generate_witness.cjs
        cp build/licenseA_js/witness_calculator.js data/proof_license/witness_calculator.cjs
        sed -i 's|require("./witness_calculator.js")|require("./witness_calculator.cjs")|' data/proof_license/generate_witness.cjs
    else
        echo "Les fichiers de setup existent d√©j√†, aucune action n√©cessaire."
        cd ..
    fi

    R1CS="Is18.r1cs"
    PTAU="ptau/pot18_final.ptau"
    ZKEY0="is18_key_0000.zkey"
    ZKEY1="is18_key_0001.zkey"
    ZKEY_FINAL="is18_key_final.zkey"
    VKEY_JSON="is18_verification_key.json"

    if [ ! -f "$ZKEY_FINAL" ] || [ ! -f "$VKEY_JSON" ]; then
        cd build
        
        # √âtape 1 : G√©n√©ration initiale du zkey
        echo "üì¶ Setup initial du circuit..."
        snarkjs zkey new $R1CS $PTAU $ZKEY0

        # √âtape 2 : Contribution au zkey
        echo "üßë‚Äçüíª Contribution au zkey..."
        snarkjs zkey contribute $ZKEY0 $ZKEY1 --name="Contribution circuit" --entropy="$(head -c 64 /dev/urandom | base64)"

        # √âtape 3 : Beacon pour s√©curiser le zkey final
        echo "‚ö° Beacon pour finaliser le zkey..."
        snarkjs zkey beacon $ZKEY1 $ZKEY_FINAL \
        "$(head -c 32 /dev/urandom | xxd -p -c 32)" \
        10 -v

        # √âtape 4 : Export de la cl√© de v√©rification
        echo "üîê Export de la cl√© de v√©rification..."
        snarkjs zkey export verificationkey $ZKEY_FINAL $VKEY_JSON
        echo "‚úÖ Phase 2 termin√©e avec succ√®s"
        cd ..
    
        # Copier les fichiers n√©cessaires dans le r√©pertoire principal
        cp build/Is18_js/Is18.wasm data/Is18/circuit.wasm
        cp build/is18_key_final.zkey data/Is18/circuit.zkey
        cp build/is18_verification_key.json data/Is18/verification_key.json
        cp build/Is18_js/generate_witness.js data/Is18/generate_witness.cjs
        cp build/Is18_js/witness_calculator.js data/Is18/witness_calculator.cjs
        sed -i 's|require("./witness_calculator.js")|require("./witness_calculator.cjs")|' data/Is18/generate_witness.cjs
    else
        echo "Les fichiers de setup existent d√©j√†, aucune action n√©cessaire."
    fi
    echo "‚úÖ Trusted setup termin√©"
}


# Fonction principale
main() {
    check_dependencies
    install_packages
    compile_circuit
    trusted_setup    
    echo ""
    echo "üéâ Setup termin√© avec succ√®s!"
    echo "=================================================="
    echo "Fichiers g√©n√©r√©s:"
    echo "  - circuit.wasm (circuit compil√©)"
    echo "  - circuit.zkey (cl√© de proving)"
    echo "  - verification_key.json (cl√© de v√©rification)"
    echo ""
    echo "Pour tester le syst√®me:"
    echo "  npm start       # D√©monstration compl√®te"
    echo ""
    echo "Le syst√®me est pr√™t √† √™tre utilis√©! üöÄ"
}

# Ex√©cuter le script principal
main
